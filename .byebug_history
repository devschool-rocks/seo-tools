exit
val
c
continue
desc_kwd
exit
result[gp.label.parameterize.underscore.to_sym]
gp.label.parameterize.underscore.to_sym
result
result[gp.label.parameterize.underscore]
c
continue
gp.label.parameterize.underscore
keyword_in_title
n
next
n
gp.label.parameterize.underscore
n
gp.label.parameterize.underscore
gp
n
exit
gp.label.parameterize.underscore
gp
next
gp
exit
gp.label.parameterize.underscore
gp
exit
title-length
gp.label.parameterize
gp
exit
continue
gp.label.to_sym
gp
exit
grade
exit
title.downcase.index(keyword)
title.index(keyword)
keyword
title
exit
doc(html).xpath("//title").text
exit
doc(html).xpath("//meta[@name='description']/@content").text
doc(html).xpath("//meta[@name='description']/@content").value
doc(html).xpath("//meta[@name='description']/@content")
doc(html).xpath("//meta[@name='Description']/@content")
doc.xpath("//meta[@name='Description']/@content")
doc.xpath("//meta[@name='description']/@content")
 html.match(/\<meta .*description.*\>(.*)<\/meta>/m)[1]
exit
26.to_f / uniq.length.to_f
13.to_f / uniq.length.to_f
13 /uniq.length
uniq.length / 13
uniq
html.scan(/\w+/).uniq
html.scan(/W+/).uniq
html.scan(/\W+/).uniq
html.scan(/\W+/)
html.grep(/\W+/)
exit
xit
(55..57).to_a
(57..55).to_a
(57..55).to_a.include? title.length
(57..55).include? title.length
title.length
exit
fg
xit
title.length
l
title
continue
exit
title = match_title(html)[1]
title = match_title(html)[0]
title = match_title(html)
exit
html.scan(/\<title\>(.*)<\/title>/m)
html.scan(/\<title\>(.*)<\/title>/g)
html.scan(/\<title\>(.*)<\/title>/n)
html.scan(/\<title\>(.*)<\/title>/g)
html.scan(/\<title\>(.*)/)
html.scan(/\<title\>(.*)<\/title>/)
html.scan(/\<title\>(.*)<\/title\>/)
html.scan(/\<title\>(.*)/)
html.scan(/\<title\>(.*)\<\/title\>/)
html.scan(/<title>(.*)<\/title>/)
html.match(/title>(.*)<\/title/)
html.match(/<title>(.*)<\/title>/)
html.match(/<title>(.*)</title>/)
html.match(/<title>(.*)<\/title>/)
html.match(/<title\>(.*)<\/title\>/)
html.match(/\<title\>(.*)<\/title\>/)
html.match(/\<title\>(.*)\<\/title\>/)
html.match(/\<title\>(.*)\<\/title\>/)[0]
html.match(/\<title\>(.*)\<\/title\>/)
html.match(/\<title\>(.*)\</title\>/)
html.match(/\<title\>.*\<\/title\>/)
html.match(/\<title\>(.*)\<\/title\>/)
html.match(/\<title\>(*.)\<\/title\>/)
html.match(/\<title\>(.*)\<\/title\>/)
html.match(\<title\>(.*)\<\/title\>)
exit
html[0..1000]
html
match_title(html)q
continue
html
continue
rankings = RankingService.(uris, keywords)
keywords = Keyword.all.map(&:value)
uris = Domain.all.map(&:value)
exit
rankings = RankingService.(Domain.all, Keyword.all)
exit
RankingService.(Domain.all, Keyword.all)
ankingService.(Domain.all, Keyword.all)
exit
item.uri
continue
item.uri
continue
item.uri
continue
item.uri
item
exit
to_add
continue
existing.include?(kw.strip)
next
existing.include?(kw.strip)
next
existing.include?(kw.strip)
next
existing.include?(kw.strip)
kw.strip
exit
existing
existing.
kw
exit
continue
kw.strip
kw
exit
kw.strip
kw
continue
params
